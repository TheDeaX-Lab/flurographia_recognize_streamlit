import numpy as np
import cv2
from tensorflow.keras.models import load_model
import streamlit as st
import pandas as pd

# =============================
# –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò –ú–û–î–ï–õ–ò
# =============================
# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
@st.cache_resource  # –∫—ç—à–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å, —á—Ç–æ–±—ã –Ω–µ –≥—Ä—É–∑–∏—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑
def load_my_model():
    model = load_model('resnet50-Covid-19-94.33.h5', compile=False)
    # –ï—Å–ª–∏ –≤–µ—Å–∞ –æ—Ç–¥–µ–ª—å–Ω–æ ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π:
    # model.load_weights("resnet50-Covid-19-weights.h5")
    return model

model = load_my_model()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–∫–∏ –∫–ª–∞—Å—Å–æ–≤ ‚Äî –ü–û–†–Ø–î–û–ö –í–ê–ñ–ï–ù!
# –î–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ø–æ—Ä—è–¥–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ (–æ–±—ã—á–Ω–æ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –∏–ª–∏ –∫–∞–∫ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ)
class_labels = ['COVID', 'Lung_Opacity', 'Normal', 'Viral Pneumonia']

# =============================
# –§–£–ù–ö–¶–ò–Ø –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø
# =============================

def predict_image(image_array) -> tuple:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç numpy-–º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–º–µ—Ç–∫—É, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å).
    """
    # 1. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BGR ‚Üí RGB (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî Streamlit –æ–±—ã—á–Ω–æ –æ—Ç–¥–∞—ë—Ç RGB)
    # –ù–æ OpenCV —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ BGR, –∞ –º—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB ‚Äî –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ RGB, –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    # img = cv2.cvtColor(image_array, cv2.COLOR_BGR2RGB)  # —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    # 2. –†–µ—Å–∞–π–∑–∏–º –¥–æ 224x224
    img = cv2.resize(image_array, (224, 224))

    # 3. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–∏–∫—Å–µ–ª–∏ –¥–æ [0, 1]
    # img = img.astype(np.float32) / 255.0

    # 4. –î–æ–±–∞–≤–ª—è–µ–º batch-–æ—Å—å: (224,224,3) ‚Üí (1,224,224,3)
    img = np.expand_dims(img, axis=0)

    # 5. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    predictions = model.predict(img, verbose=0)

    # 6. –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    predicted_class_index = np.argmax(predictions, axis=1)[0]
    confidence = np.max(predictions)

    # 7. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ—Ç–∫—É –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    return class_labels[predicted_class_index], confidence

# =============================
# STREAMLIT –ò–ù–¢–ï–†–§–ï–ô–°
# =============================

st.title("ü©∫ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤ –ª—ë–≥–∫–∏—Ö")
st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏–∞–≥–Ω–æ–∑.")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ —Å –ø–æ–º–æ—â—å—é OpenCV
    file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
    image = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)  # BGR —Ñ–æ—Ä–º–∞—Ç

    if image is None:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        st.image(image, channels="BGR", caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)

        # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."):
            label, confidence = predict_image(image)

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        st.success(f"**–î–∏–∞–≥–Ω–æ–∑:** {label}")
        st.info(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏:** {confidence:.4f} (–º–∞–∫—Å–∏–º—É–º 1.0)")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        st.write("### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–æ –∫–ª–∞—Å—Å–∞–º:")
        probs = model.predict(np.expand_dims(cv2.resize(image, (224,224)).astype(np.float32), axis=0), verbose=0)[0]
        prob_df = pd.DataFrame({
            '–ö–ª–∞—Å—Å': class_labels,
            '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': probs
        }).sort_values('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å', ascending=False).reset_index(drop=True)
        st.bar_chart(prob_df.set_index('–ö–ª–∞—Å—Å'))